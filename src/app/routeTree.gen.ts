/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WithAdderImport } from './routes/_withAdder'
import { Route as WithAdderIndexImport } from './routes/_withAdder.index'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const TodosListIdEditLazyImport = createFileRoute('/todos/$listId/edit')()
const WithAdderTodosListIdLazyImport = createFileRoute(
  '/_withAdder/todos/$listId',
)()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const WithAdderRoute = WithAdderImport.update({
  id: '/_withAdder',
  getParentRoute: () => rootRoute,
} as any)

const WithAdderIndexRoute = WithAdderIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WithAdderRoute,
} as any)

const TodosListIdEditLazyRoute = TodosListIdEditLazyImport.update({
  id: '/todos/$listId/edit',
  path: '/todos/$listId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/todos.$listId.edit.lazy').then((d) => d.Route),
)

const WithAdderTodosListIdLazyRoute = WithAdderTodosListIdLazyImport.update({
  id: '/todos/$listId',
  path: '/todos/$listId',
  getParentRoute: () => WithAdderRoute,
} as any).lazy(() =>
  import('./routes/_withAdder.todos.$listId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_withAdder': {
      id: '/_withAdder'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WithAdderImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/_withAdder/': {
      id: '/_withAdder/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof WithAdderIndexImport
      parentRoute: typeof WithAdderImport
    }
    '/_withAdder/todos/$listId': {
      id: '/_withAdder/todos/$listId'
      path: '/todos/$listId'
      fullPath: '/todos/$listId'
      preLoaderRoute: typeof WithAdderTodosListIdLazyImport
      parentRoute: typeof WithAdderImport
    }
    '/todos/$listId/edit': {
      id: '/todos/$listId/edit'
      path: '/todos/$listId/edit'
      fullPath: '/todos/$listId/edit'
      preLoaderRoute: typeof TodosListIdEditLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface WithAdderRouteChildren {
  WithAdderIndexRoute: typeof WithAdderIndexRoute
  WithAdderTodosListIdLazyRoute: typeof WithAdderTodosListIdLazyRoute
}

const WithAdderRouteChildren: WithAdderRouteChildren = {
  WithAdderIndexRoute: WithAdderIndexRoute,
  WithAdderTodosListIdLazyRoute: WithAdderTodosListIdLazyRoute,
}

const WithAdderRouteWithChildren = WithAdderRoute._addFileChildren(
  WithAdderRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof WithAdderRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/': typeof WithAdderIndexRoute
  '/todos/$listId': typeof WithAdderTodosListIdLazyRoute
  '/todos/$listId/edit': typeof TodosListIdEditLazyRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutLazyRoute
  '/': typeof WithAdderIndexRoute
  '/todos/$listId': typeof WithAdderTodosListIdLazyRoute
  '/todos/$listId/edit': typeof TodosListIdEditLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_withAdder': typeof WithAdderRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/_withAdder/': typeof WithAdderIndexRoute
  '/_withAdder/todos/$listId': typeof WithAdderTodosListIdLazyRoute
  '/todos/$listId/edit': typeof TodosListIdEditLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/about' | '/' | '/todos/$listId' | '/todos/$listId/edit'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/' | '/todos/$listId' | '/todos/$listId/edit'
  id:
    | '__root__'
    | '/_withAdder'
    | '/about'
    | '/_withAdder/'
    | '/_withAdder/todos/$listId'
    | '/todos/$listId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  WithAdderRoute: typeof WithAdderRouteWithChildren
  AboutLazyRoute: typeof AboutLazyRoute
  TodosListIdEditLazyRoute: typeof TodosListIdEditLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  WithAdderRoute: WithAdderRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute,
  TodosListIdEditLazyRoute: TodosListIdEditLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_withAdder",
        "/about",
        "/todos/$listId/edit"
      ]
    },
    "/_withAdder": {
      "filePath": "_withAdder.tsx",
      "children": [
        "/_withAdder/",
        "/_withAdder/todos/$listId"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/_withAdder/": {
      "filePath": "_withAdder.index.tsx",
      "parent": "/_withAdder"
    },
    "/_withAdder/todos/$listId": {
      "filePath": "_withAdder.todos.$listId.lazy.tsx",
      "parent": "/_withAdder"
    },
    "/todos/$listId/edit": {
      "filePath": "todos.$listId.edit.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
